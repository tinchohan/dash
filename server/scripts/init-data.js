#!/usr/bin/env node

/**
 * Script de inicializaci√≥n de datos para Render
 * Se ejecuta durante el deploy para cargar datos hist√≥ricos del a√±o
 * antes de que la webapp est√© live
 */

import 'dotenv/config';
import { initDatabase } from '../lib/db.js';
import { checkAndLoadYearData } from '../routes/sync.js';

async function initializeData() {
  console.log('üöÄ Starting data initialization for Render deploy...');
  
  try {
    // Inicializar la base de datos
    console.log('üìä Initializing database...');
    initDatabase();
    
    // Verificar y cargar datos del a√±o si es necesario
    console.log('üîç Checking if database needs initial data load...');
    const result = await checkAndLoadYearData();
    
    if (result.success && !result.alreadyHasData) {
      console.log(`‚úÖ Initial year data loaded for ${result.year}`);
      console.log(`üìÖ Date range: ${result.fromDate} to ${result.toDate}`);
      console.log(`üìä Accounts processed: ${result.result.results.length}`);
      
      const successfulAccounts = result.result.results.filter(r => r.ok).length;
      console.log(`‚úÖ Successful accounts: ${successfulAccounts}/${result.result.results.length}`);
      
      if (successfulAccounts > 0) {
        console.log('üéâ Data initialization completed successfully!');
        process.exit(0);
      } else {
        console.log('‚ö†Ô∏è No data was loaded from any account');
        process.exit(1);
      }
    } else if (result.alreadyHasData) {
      console.log(`‚ÑπÔ∏è Database already has ${result.orderCount} orders`);
      console.log('‚úÖ Data initialization skipped - database already populated');
      process.exit(0);
    } else {
      console.log('‚ùå Data initialization failed');
      process.exit(1);
    }
    
  } catch (error) {
    console.error('‚ùå Data initialization failed:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Ejecutar solo si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  initializeData();
}

export { initializeData };
